<template>
  <div>
    <div class="demo-split">
      <div slot="top" class="demo-split-pane">
        <Button type="warning" @click="setMessage1(setData,index)">修改</Button>
        <Button type="success" @click="addMessage1">新增</Button>
      </div>
    </div>
    <Table
      border
      :columns="columns7"
      :data="list"
      highlight-row
      :loading="loading"
      @on-row-click="getIndex"
    ></Table>
    <Page
      :total="total"
      :current="pageNo"
      id="emailMessage"
      :page-size="pageSize"
      @on-change="onChange"
    />
    <Modal v-model="modal6" title="删除操作" @on-ok="onOK(index)">
      <p>确定删除吗？</p>
    </Modal>
    <!-- 新增邮件信息 -->
    <Modal v-model="addMessage" title="新增邮件信息" :draggable="true">
      <div class="mode_addMessage">
        <Form ref="formValidate1" :model="formValidate1" :rules="ruleValidate1" :label-width="80">
          <FormItem label="标识" prop="id">
            <Input v-model="formValidate1.id"/>
          </FormItem>
          <FormItem label="标题" prop="title">
            <Input v-model="formValidate1.title"/>
          </FormItem>
          <FormItem label="发件人" prop="name">
            <Input v-model="formValidate1.name"/>
          </FormItem>
          <FormItem label="备注" prop="desc">
            <Input v-model="formValidate1.desc"/>
          </FormItem>
        </Form>

        <p v-if="showToast" class="toast">请补充完整</p>
      </div>
      <div slot="footer">
        <Button type="text" size="large" @click="cancel">取消</Button>
        <Button type="primary" size="large" @click="isAdd">确定</Button>
      </div>
    </Modal>
    <!-- 修改邮件信息 -->
    <Modal v-model="setMessage" title="修改邮件信息" :draggable="true">
      <div>
        <Form ref="formValidate1" :model="formValidate" :rules="ruleValidate" :label-width="80">
          <FormItem label="标题" prop="title">
            <Input v-model="formValidate.title"/>
          </FormItem>
          <FormItem label="发件人" prop="name">
            <Input v-model="formValidate.name"/>
          </FormItem>
          <FormItem label="备注" prop="desc">
            <Input v-model="formValidate.desc"/>
          </FormItem>
        </Form>

        <p v-if="showToast" class="toast">请补充完整</p>
      </div>
      <div slot="footer">
        <Button type="text" size="large" @click="cancel">取消</Button>
        <Button type="primary" size="large" @click="isSet(index)">确定</Button>
      </div>
    </Modal>
  </div>
</template>
<script>
import axios from 'axios'
export default {
  data () {
    return {
      total: 20,
      list: [],
      pageNo: 1,
      pageSize: 5, // 每页条数
      modal6: false,
      index: '',
      id: '',
      title: '',
      name: '',
      desc: '',
      loading: true,
      addMessage: false,
      setMessage: false,
      setData: '',
      showToast: false,
      formValidate1: {
        id: '',
        title: '',
        name: '',
        desc: ''
      },
      ruleValidate1: {
        id: [{ required: true, message: '标识不能为空', trigger: 'blur' }],
        title: [{ required: true, message: '标题不能为空', trigger: 'blur' }],
        name: [{ required: true, message: '发件人不能为空', trigger: 'blur' }],
        desc: [{ required: true, message: '备注不能为空', trigger: 'blur' }]
      },
      formValidate: {
        title: '',
        name: '',
        desc: ''
      },
      ruleValidate: {
        title: [{ required: true, message: '标题不能为空', trigger: 'blur' }],
        name: [{ required: true, message: '发件人不能为空', trigger: 'blur' }],
        desc: [{ required: true, message: '备注不能为空', trigger: 'blur' }]
      },
      columns7: [
        {
          title: '标识',
          key: 'id',
          render: (h, params) => {
            return h('div', [
              h('Icon', {
                props: {
                  type: 'person'
                }
              }),
              h('strong', params.row.id)
            ])
          }
        },
        {
          title: '标题',
          key: 'title'
        },
        {
          title: '发件人',
          key: 'name'
        },
        {
          title: '备注',
          key: 'desc'
        },
        {
          title: '操作',
          key: 'set',
          width: 150,
          align: 'center',
          render: (h, params) => {
            return h('div', [
              h(
                'Button',
                {
                  props: {
                    type: 'primary',
                    size: 'small'
                  },
                  style: {
                    marginRight: '5px'
                  },
                  on: {
                    click: () => {
                      this.show(params.index)
                    }
                  }
                },
                '查看'
              ),
              h(
                'Button',
                {
                  props: {
                    type: 'error',
                    size: 'small'
                  },
                  on: {
                    click: () => {
                      this.$Modal.confirm({
                        title: '删除操作',
                        content: '<p>确认删除吗？</p>',
                        onOk: () => {
                          this.remove(params.index)
                        }
                      })
                    }
                  }
                },
                '删除'
              )
            ])
          }
        }
      ]
    }
  },
  mounted () {
    axios({
      url: 'http://www.baidu.com/emil'
    }).then(res => {
      // console.log(res.data.list)
      if (res.data.list.length <= 5) {
        this.list = res.data.list
      } else {
        this.list = res.data.list.splice(0, this.pageSize)
      }
    })
    setTimeout(() => {
      this.loading = false
    }, 1000)
  },
  methods: {
    show (index) {
      this.$Modal.info({
        title: 'Info',
        content: `标题：${this.list[index].title}<br>名字：${this.list[index].name}<br>备注：${this.list[index].desc}`
      })
    },
    getIndex (data, index) {
      console.log(data, index)
      this.index = index
      this.setData = data
    },
    // 删除某项
    remove (index) {
      this.list.splice(index, 1)
    },
    onChange (val) {
      // console.log(val)
      this.pageNo = val // 改变后的页码
    },
    // remove1(index){
    //     if(typeof(index) ==  'number'){
    //          this.modal6 = true
    //     }else{
    //         this.$Message.info('请选择一项进行操作')
    //     }

    // },
    // //确认是否删除
    // onOK(index){

    //     this.list.splice(index,1)
    // },
    isAdd () {
      if (
        this.formValidate1.desc &&
        this.formValidate1.name &&
        this.formValidate1.title &&
        this.formValidate1.id
      ) {
        var obj = {
          id: this.formValidate1.id,
          name: this.formValidate1.name,
          title: this.formValidate1.title,
          desc: this.formValidate1.desc
        }
        this.list.unshift(obj)
        this.addMessage = false
        this.showToast = false
        // 清空输入框
        this.formValidate1.name = ''
        this.formValidate1.desc = ''
        this.formValidate1.title = ''
        this.formValidate1.id = ''
      } else {
        this.showToast = true
      }
    },
    // 弹出添加信息框
    addMessage1 () {
      this.addMessage = true
    },
    setMessage1 (data, index) {
      if (typeof index === 'number') {
        this.formValidate.desc = data.desc
        this.formValidate.name = data.name
        this.formValidate.title = data.title
        this.setMessage = true
      } else {
        alert('请选择一项进行修改')
      }
      // console.log(data)
    },
    // 确认修改
    isSet (index) {
      // console.log(this.title,this.desc,this.name)
      if (
        this.formValidate.title &&
        this.formValidate.name &&
        this.formValidate.desc
      ) {
        this.list[index].desc = this.formValidate.desc
        this.list[index].title = this.formValidate.title
        this.list[index].name = this.formValidate.name
        this.setMessage = false
        this.showToast = false

        // 清空输入框
        this.formValidate.name = ''
        this.formValidate.desc = ''
        this.formValidate.title = ''
        this.index = ''
      } else {
        this.showToast = true
      }
    },
    cancel () {
      this.showToast = false
      this.addMessage = false
      this.setMessage = false
      this.formValidate1.name = ''
      this.formValidate1.desc = ''
      this.formValidate1.title = ''
      this.formValidate1.id = ''
      this.formValidate.name = ''
      this.formValidate.desc = ''
      this.formValidate.title = ''
    }
  }
}
</script>

<style scoped>
.demo-split {
  height: 50px;
  border-bottom: 1px solid #dcdee2;
}
.demo-split-pane {
  padding: 10px;
}
.demo-split-pane button {
  margin: 0 10px;
  float: right;
}
#emailMessage {
  float: right;
  padding-top: 20px;
}
.addMessage1 {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 10px;
}
.addMessage1 input {
  margin-left: 15px;
}
.add {
  margin-left: 5px;
}
.test {
  margin-right: 65px;
}
.toast {
  animation: toast 1s infinite;
}
@keyframes toast {
  0% {
    color: #ccc;
  }
  50% {
    color: #f00;
  }
  100% {
    color: #ccc;
  }
}
.mode_addMessage {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}
</style>
